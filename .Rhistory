??ggpredict
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.00001) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
predict$predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.00001) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
predict$predicted
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+1) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av"+1)
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.001) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
??ggpredict
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.01) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
x <- cbind(patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472), day <- c(1:34))
patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472)
x <- cbind(patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472), day <- c(1:35))
model <- lm(patients ~ day + I(day)^2, data=x)
model <- lm(patients ~ day + I(day)^2, data=x)
x <- as.data.frame(cbind(patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472), day <- c(1:35)))
model <- lm(patients ~ day + I(day)^2, data=x)
model
model <- lm(log(patients) ~ day, data=x)
model
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x[24:35,])
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x[24:35,])
summary(model)
model <- lm(log(patients) ~ day, data=x[24:35,])
summary(model)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients[24:35] ~ day[24:35], xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients[24:35] ~ day[24:35], xlim=c(24,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
patients_exp <- exp(predict(model, list(day=timeseq)))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day[24:35]=timeseq)))
plot(patients[24:35] ~ day[24:35], xlim=c(24,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
max(patients_exp)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:35)))
patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:25)))
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
plot(patients ~ day, xlim=c(0,50), ylim=c(0,2000))
lines(timeseq, patients_exp)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
max(patients_exp)
model <- lm(log(patients) ~ day, data=x[11:25;])
model <- lm(log(patients) ~ day, data=x[11:25,])
summary(model)
timeseq <- seq(11, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(11,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x[19:25,])
summary(model)
timeseq <- seq(19, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(19,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
model <- lm(log(patients[19:25,]) ~ day[19:25,], data=x[19:25,])
summary(model)
timeseq <- seq(19, 46, 0.1)
x <- x[19:25,]
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
x
model <- lm(log(patients) ~ day, data=x)
summary(model)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:25)))
model <- lm(log(patients) ~ day, data=x)
summary(model)
x <- x[19:25,]
x
model <- lm(log(x[,1]) ~ x[,2], data=x)
summary(model)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
max(patients_exp)
patients_exp <- exp(predict(model, list(x[,2]=timeseq)))
patients_exp <- exp(predict(model, list(V2=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
patients_exp <- exp(predict(model, list(V2=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(V2=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
max(patients_exp)
summary(model)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:25)))
x <- x[19:25,]
colnames(x) <- c("patients","day")
model <- lm(log(patiens) ~ day, data=x)
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
#install.packages("ggeffects")
#library(ggeffects)
updist <- spavar$updist
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
updist <- spavar$updist
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.01) + updist, data=environment2) # add a small number to the ammonium value to avoid infinite values in subsequent calculations
predict <- ggpredict(fit, terms = "NH4._av")
??ggpredict
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log1p(NH4._av) + updist, data=environment2) # add a small number to the ammonium value to avoid infinite values in subsequent calculations
predict <- ggpredict(fit, terms = "NH4._av")
??ggpredict
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
??log1p
?log1p
#Bayesian approach
bas.model <- bas.lm(avcondition ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
plot(confint(coef.model, parm = 2:11))
pip <- summary(bas.model)
PIP[c(3:12),1] <- pip[2:11,1]*sign(coef.model$postmean[2:11])
#### Length ####
# Effect of environment (average) on host length
avlength <- aggregate(data$length, by = list(data[,1]), function(x){mean(x, na.rm =T)})[,2]
summary(avlength); plot(density(avlength))
model <- lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
# Have a look at a Bayesian approach
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
# Bayesian Model Averaging
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
plot(confint(coef.model, parm = 2:11))
# Bayesian Model Averaging
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
netcen <- spavar$netcen
updist <- spavar$updist
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
netcen <- spavar$netcen
updist <- spavar$updist
fit <- lm(avlength ~ O2_sat_av + Con_av^2 + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avlength)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression("Average length [mm SL]"))
predict <- ggpredict(fit, terms = "netcen")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=netcen, y=avlength)) +
labs(x=expression("Network centrality"), y=expression("Average length [mm SL]"))
#### CALCULATE PARAMETERS ####
names(data)
#parasite data is overdispersed (mostly so for Trichodina), if using average abundance data, species matrix needs to be transformed
datao <- na.omit(data[,c(1,23:25,27:33)])
ddata <- dispweight(datao[,-1])
avab <- aggregate(ddata, by = list(datao[,1]), function(x){mean(x, na.rm =T)})
prev = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){sum(x >0, na.rm = T)/length(x)})
medin = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){median(x[x >0], na.rm = T)})
pa = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){ifelse(mean(x, na.rm =T)>0,1,0)})
avab[is.na(avab)] <- 0
prev[is.na(prev)] <- 0
medin[is.na(medin)] <- 0
#### Gyrodactylus ####
#### Average abundance ####
plot(avab$gyro); plot(density(avab$gyro))
plot((avab$gyro)^(1/3)); plot(density((avab$gyro)^(1/3)))
model <- lm((avab$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm((avab$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((avab$gyro)^(1/3) ~ avlength + T_av + COD_av + log(Nt_av) + pool_riffle, data=environment2)
summary(model)
#plot(model)
res <- resid(lm((avab$gyro)^(1/3) ~ T_av + COD_av + log(Nt_av) + pool_riffle, data=environment2))
plot(res ~ avlength)
lines(lowess(res ~ avlength), col=3)
cor.test(res, avlength, method="spearman")
res <- resid(lm((avab$gyro)^(1/3) ~ avlength + T_av + log(Nt_av) + pool_riffle, data=environment2))
plot(res ~ environment2$COD_av)
lines(lowess(res ~ environment2$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
# Bayesian Model Averaging
bas.model <- bas.lm(avab$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
# Bayesian Model Averaging
bas.model <- bas.lm(avab$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
fit <- lm(avlength ~ avlength + O2_sat_av + Con_av^2 + COD_av + log1p(NH4._av) + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avlength)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression("Average length [mm SL]"))
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avlength)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
fit <- lm(avab$gyro ~ avlength + O2_sat_av + Con_av^2 + COD_av + log1p(NH4._av) + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avab$gyro)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
predict <- ggpredict(fit, terms = "COD_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$COD_av, y=avab$gyro)) +
labs(x=expression("Chemical oxygen demand [mg/L]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
# Have a look at a Bayesian approach
bas.model <- bas.lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
netcen <- spavar$netcen
updist <- spavar$updist
fit <- lm(avab$gyro ~ Con_av^2 + log1p(NH4._av) + log(Nt_av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avab$gyro)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
prev$gyro
fit <- lm(prev$gyro ~ Con_av^2 + log1p(NH4._av) + log(Nt_av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=prev$gyro)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [prevalence]"))
# Bayesian Model Averaging
bas.model <- bas.lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),5] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
# Bayesian Model Averaging
bas.model <- bas.lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
# Bayesian
bas.model <- bas.lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
# Bayesian Model Averaging
bas.model <- bas.lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
# Bayesian Model Averaging
bas.model <- bas.lm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
?bas.lm
pa$glugea
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"),
source('~/GitHub/Stickleback-parasites-2016/Parasite2016_Bayesian_analyses_current.R', echo=TRUE)
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"), prior="JZS")
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"), prior="JZS")
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
# Bayesian Model Averaging
pa_glugea <- pa$glugea
netcen <- spavar$netcen
updist <- spavar$updist
bas.model <- bas.glm(glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
environment2
netcen
updist
pool_riffle
pa_glugea
avlength
avcondition
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
avlength
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial, betaprior="g.prior", modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior=g.prior, modelprior=beta.binomial)
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior=g.prior, modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior="g.prior", modelprior=beta.binomial)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior=beta.binomial)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=g.prior, modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(), betaprior=g.prior, modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=g.prior(), modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=g.prior(3), modelprior=beta.binomial(1,1))
summary(bas.model)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=BIC)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior, modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=beta.binomial(1,1))
summary(bas.model)
image(bas.model, rotate=F)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=robust(), modelprior=beta.binomial(1,1))
summary(bas.model)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=uniform)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=uniform())
summary(bas.model)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
fit <- lm(pa_glugea ~ T_av + O2_sat_av + Con_av^2 + COD_av + meander + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "avlength")
fit <- lm(pa_glugea ~ avlength + T_av + O2_sat_av + Con_av^2 + COD_av + meander + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "avlength")
fit <- glm(pa_glugea ~ avlength + T_av + O2_sat_av + Con_av^2 + COD_av + meander + netcen + updist, data=environment2, family = binomial(link = "logit"))
fit <- glm(pa_glugea ~ avlength + T_av + O2_sat_av + Con_av^2 + COD_av + meander + updist, data=environment2, family = binomial(link = "logit"))
fit <- glm(pa_glugea ~ avlength + O2_sat_av + Con_av^2 + log(Nt_av) + meander + updist, data=environment2, family = binomial(link = "logit"))
fit <- glm(pa_glugea ~ avlength + O2_sat_av + Con_av^2 + meander + updist, data=environment2, family = binomial(link = "logit"))
predict <- ggpredict(fit, terms = "avlength")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=pa_glugea)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
predict <- ggpredict(fit, terms = "avlength")
?dispweight
