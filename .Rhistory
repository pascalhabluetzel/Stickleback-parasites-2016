pvalues = arc.strength(res, data = gaussian.test)
strength.plot(res, strength = pvalues)
install.packages("broom")
library(broom)
install.packages("dyplr")
devtools::install_github("hadley/dplyr")
library(dplyr)
library(broom)
install.packages("broom")
library(broom)
library(ggplot2) # for making figures
#library(readr)
#library(gridExtra)
#library(plyr)
library(vegan) # for function dispweight
library(MASS) # for step-wise model selection
#library(lme4)
library(car) # for VIF
#library(BMS)
library(BAS) # for Bayesian models
library(dplyr)
#######################
#### PRELIMINARIES ####
#######################
#### READ AND PREPARE DATA ####
setwd('C:/Users/pascalh/Documents/GitHub/Stickleback-parasites-2016')
data <- read.csv("data_2016.csv", sep=';')
environment <- read.csv("Environment_update.csv", sep=';')
#### ENVIRONMENTAL DATA ####
# look at correlation among water parameters
colnames(environment)
plot(environment$T_av); plot(density(environment$T_av))
plot(environment$pH_av) # correlated with Con -> leave out
#plot(environment$O2_av) # highly correlated with O2 and dependent on T -> leave out
plot(environment$O2_sat_av); plot(density((environment$O2_sat_av)^2))
plot(environment$Con_av); plot(density((environment$Con_av)^2))
plot(environment$Cl._av) # correlated with Con -> leave out
plot(environment$COD_av); plot(density(environment$COD_av))
plot(environment$KjN_av) # highly correlated with NH4 -> leave out
plot(environment$NH4._av); plot(density(log(environment$NH4._av)))
plot(environment$NO3._av); # correlated with Nt -> leave out
plot(environment$NO2._av) # correlated with NO3 -> leave out
plot(environment$Nt_av); plot(density(log(environment$Nt_av))) # highly correlated with NO3 -> leave out
plot(environment$Pt_av) # highly correlated with oPO4 -> leave out
plot(environment$oPO4_av) # highly correlated with NH4 -> leave out
plot(environment$SM_av); plot(density(log(environment$SM_av)))
#### FIELD DATA ####
field_data <- read.csv("field_data.csv", sep=',')
environment2 <- cbind(environment[,c(49,52:53,55,57,60,63)], field_data[-c(8,10,25,27,37),33:34])
environment2$pool_riffle <- as.factor(environment2$pool_riffle)
environment2$meander <- as.factor(environment2$meander)
#### SPATIAL DATA ####
spavar <- read.csv("space2.csv", sep=';') #spatial variables: network centrality and upstream distance
plot(spavar$netcen); plot(density(spavar$netcen))
plot(spavar$updist); plot(density(spavar$updist))
#### Matrix for PIP (Posterior Inclusion Probability) ####
PIP <- matrix(nrow=12, ncol=11)
rownames(PIP) <- c("Condition", "Length", "Temperature", "Oxygen saturation", "Conductivity", "COD", "Ammonium", "Total nitrogen", "Pool riffle pattern", "Meander", "Network centrality", "Upstream distance")
colnames(PIP) <- c("Condition", "Length", "Gyrodactylus abundance", "Gyrodactylus prevalence", "Gyrodactylus infection intensity", "Trichodina abundance", "Trichodina prevalence", "Trichodina infection intensity", "Glugea", "Contracaecum", "Aguillicola")
#### Condition ####
# Effect of environment (average) on host condition
condition <- resid(lm(data$weight~data$length + data$Sex), na.action=na.exclude)
datao <- na.omit(data[,c(1,18,19,21)])
avcondition <- aggregate(condition, by = list(datao[,1]), function(x){mean(x, na.rm =T)})[,2]
summary(avcondition); plot(density(avcondition))
model <- lm(avcondition ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
vif(model)
step.model <- stepAIC(lm(avcondition ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
summary(model <- lm(avcondition ~ pool_riffle + meander, data=environment2))
#plot(model)
vif(model)
res <- resid(lm(avcondition ~ pool_riffle, data=environment2))
boxplot(res ~ environment2$meander)
res <- resid(lm(avcondition ~ meander, data=environment2))
boxplot(res ~ environment2$meander)
#Bayesian approach
bas.model <- bas.lm(avcondition ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
plot(confint(coef.model, parm = 2:11))
pip <- summary(bas.model)
PIP[c(3:12),1] <- pip[2:11,1]*sign(coef.model$postmean[2:11])
#### Length ####
# Effect of environment (average) on host length
avlength <- aggregate(data$length, by = list(data[,1]), function(x){mean(x, na.rm =T)})[,2]
summary(avlength); plot(density(avlength))
model <- lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
vif(model)
step.model <- stepAIC(lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
summary(model <- lm(avlength ~ Con_av + meander + spavar$netcen, data=environment2))
#plot(model)
vif(model)
# Have a look at a Bayesian approach
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
plot(confint(coef.model, parm = 2:11))
pip <- summary(bas.model)
PIP[c(3:12),2] <- pip[2:11,1]*sign(coef.model$postmean[2:11])
#Figure
BPM <- predict(bas.model, estimator = "BPM", se.fit = TRUE)
BPM$best.vars
fit <- lm(avlength ~ O2_sat_av + Con_av^2 + spavar$netcen + spavar$updist, data=environment2)
d <- data.frame(cbind(spavar$netcen, fit$fitted.values))
p <- ggplot(d, aes(x = spavar$netcen, y = fit$fitted.values)) +
theme_bw() +
geom_smooth(method=lm, color="red", fill="#69b3a2", se=TRUE) +
geom_smooth(method=loess, se=FALSE, linetype="dashed") +
geom_point(data = environment2, aes(x = spavar$netcen, y = fit$fitted.values)) +
labs(x=expression("Network peripherality [m]"), y=expression("Average host length [mm SL]"))
p
fit <- lm(avlength ~ O2_sat_av + Con_av^2 + spavar$netcen + spavar$updist, data=environment2)
d <- data.frame(cbind(environment2$Con_av, fit$fitted.values))
p <- ggplot(d, aes(x = environment2$Con_av, y = fit$fitted.values)) +
theme_bw() +
geom_smooth(method=lm, color="red", fill="#69b3a2", se=TRUE) +
geom_smooth(method=loess, se=FALSE, linetype="dashed") +
geom_point(data = environment2, aes(x = environment2$Con_av, y = fit$fitted.values)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression("Average host length [mm SL]"))
p
#### CALCULATE PARAMETERS ####
names(data)
#parasite data is overdispersed (mostly so for Trichodina), if using average abundance data, species matrix needs to be transformed
datao <- na.omit(data[,c(1,23:25,27:33)])
ddata <- dispweight(datao[,-1])
avab <- aggregate(ddata, by = list(datao[,1]), function(x){mean(x, na.rm =T)})
prev = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){sum(x >0, na.rm = T)/length(x)})
medin = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){median(x[x >0], na.rm = T)})
pa = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){ifelse(mean(x, na.rm =T)>0,1,0)})
avab[is.na(avab)] <- 0
prev[is.na(prev)] <- 0
medin[is.na(medin)] <- 0
#### Gyrodactylus ####
#### Average abundance ####
plot(avab$gyro); plot(density(avab$gyro))
plot((avab$gyro)^(1/3)); plot(density((avab$gyro)^(1/3)))
model <- lm((avab$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
step.model <- stepAIC(lm((avab$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((avab$gyro)^(1/3) ~ avlength + T_av + COD_av + log(Nt_av) + pool_riffle, data=environment2)
summary(model)
#plot(model)
res <- resid(lm((avab$gyro)^(1/3) ~ T_av + COD_av + log(Nt_av) + pool_riffle, data=environment2))
plot(res ~ avlength)
lines(lowess(res ~ avlength), col=3)
cor.test(res, avlength, method="spearman")
res <- resid(lm((avab$gyro)^(1/3) ~ avlength + T_av + log(Nt_av) + pool_riffle, data=environment2))
plot(res ~ environment2$COD_av)
lines(lowess(res ~ environment2$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
# Have a look at a Bayesian approach
bas.model <- bas.lm(avab$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),3] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
#### Prevalence ####
plot(prev$gyro); plot(density(prev$gyro))
model <- lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
step.model <- stepAIC(lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm(prev$gyro ~ Con_av + COD_av + pool_riffle + meander, data=environment2)
summary(model)
#plot(model)
res <- resid(lm(prev$gyro ~ COD_av + pool_riffle + meander, data=environment2))
plot(res ~ environment$Con_av)
lines(lowess(res ~ environment$Con_av), col=3)
cor.test(res, environment2$Con_av, method="spearman")
res <- resid(lm(prev$gyro ~ Con_av + pool_riffle + meander, data=environment2))
plot(res ~ environment$COD_av)
lines(lowess(res ~ environment$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
# Have a look at a Bayesian approach
bas.model <- bas.lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),4] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
#### Median abundance ####
plot(medin$gyro); plot(density(medin$gyro))
plot((medin$gyro)^(1/3)); plot(density((medin$gyro)^(1/3)))
model <- lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
step.model <- stepAIC(lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((medin$gyro)^(1/3) ~ T_av + COD_av + spavar$netcen, data=environment2)
summary(model)
#plot(model)
# Have a look at a Bayesian approach
bas.model <- bas.lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),5] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
#### Trichodina ####
#### Average abundance ####
plot(avab$tricho); plot(density(avab$tricho))
plot((avab$tricho)^(1/3)); plot(density((avab$tricho)^(1/3)))
model <- lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
step.model <- stepAIC(lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((avab$tricho)^(1/3) ~ Con_av + COD_av + pool_riffle + meander + spavar$netcen, data=environment2)
summary(model)
#plot(model)
res <- resid(lm((avab$tricho)^(1/3) ~ COD_av + pool_riffle + meander + spavar$netcen, data=environment2))
plot(res ~ environment2$Con_av)
lines(lowess(res ~ environment2$Con_av), col=3)
cor.test(res, environment2$Con_av, method="spearman")
res <- resid(lm((avab$tricho)^(1/3) ~ Con_av + pool_riffle + meander + spavar$netcen, data=environment2))
plot(res ~ environment2$COD_av)
lines(lowess(res ~ environment2$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
res <- resid(lm((avab$tricho)^(1/3) ~ Con_av + COD_av + pool_riffle + meander, data=environment2))
plot(res ~ spavar$netcen)
lines(lowess(res ~ spavar$netcen), col=3)
cor.test(res, spavar$netcen, method="spearman")
# Bayesian
bas.model <- bas.lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),6] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
#### Prevalence ####
plot(prev$tricho); plot(density(prev$tricho))
model <- lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
step.model <- stepAIC(lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm(prev$tricho ~ Con_av + log(NH4._av), data=environment2)
summary(model)
#plot(model)
res <- resid(lm(prev$tricho ~ log(NH4._av), data=environment2))
plot(res ~ environment2$Con_av)
lines(lowess(res ~ environment2$Con_av), col=3)
cor.test(res, environment2$Con_av, method="spearman")
res <- resid(lm(prev$tricho ~ Con_av, data=environment2))
plot(res ~ log(environment2$NH4._av))
lines(lowess(res ~ log(environment2$NH4._av)), col=3)
cor.test(res, environment2$NH4._av, method="spearman")
# Bayesian
bas.model <- bas.lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),7] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
#### Median abundance ####
plot(medin$tricho); plot(density(medin$tricho))
plot((medin$tricho)^(1/3)); plot(density((medin$tricho)^(1/3)))
model <- lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
#plot(model)
step.model <- stepAIC(lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((medin$tricho)^(1/3) ~ Con_av^2 + COD_av + log(NH4._av) + pool_riffle + meander + spavar$netcen, data=environment2)
summary(model)
#plot(model)
res <- resid(lm(prev$tricho ~ COD_av + log(NH4._av) + pool_riffle + meander + spavar$netcen, data=environment2))
plot(res ~ environment2$Con_av)
lines(lowess(res ~ environment2$Con_av), col=3)
cor.test(res, environment2$Con_av^2, method="spearman")
# Bayesian
bas.model <- bas.lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),8] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
BPM <- predict(bas.model, estimator = "BPM", se.fit = TRUE)
conf.fit <- confint(BPM, parm = "mean")
conf.pred <- confint(BPM, parm = "pred")
plot(conf.pred[,3]^3 ~ environment2$Con_av, xlab=expression(paste("Conductivity [", mu, "S/cm]")), ylab=expression(paste(italic("Trichodina"), " sp. [median infection intensity]")))
lines(lowess(conf.pred[,3]^3 ~ environment2$Con_av), lt=2)
abline(lm(conf.pred[,3]^3 ~ poly(environment2$Con_av, degree=-3)), lt=2)
abline(glm(conf.pred[,1]^3 ~ environment2$Con_av), lt=2)
abline(glm(conf.pred[,2]^3 ~ environment2$Con_av), lt=2)
# for comparison, plot the raw data
plot(medin$tricho ~ environment2$Con_av, xlab=expression(paste("Conductivity [", mu, "S/cm]")), ylab=expression(paste(italic("Trichodina"), " sp. [median infection intensity]")))
lines(lowess(medin$tricho ~ environment2$Con_av), lt=2)
fit <- lm(medin$tricho ~ T_av + Con_av + COD_av + NH4._av + spavar$updist, data=environment2)
d <- data.frame(cbind(environment2$Con_av, fit$fitted.values))
p <- ggplot(d, aes(x = environment2$Con_av, y = fit$fitted.values)) +
theme_bw() +
geom_smooth(method=lm, color="red", fill="#69b3a2", se=TRUE) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = fit$fitted.values))
p
library(ggplot2)
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + spavar$updist, data=environment2)
fit <- lm((medin$tricho)^(1/3) ~ T_av + COD_av + log(NH4._av) + spavar$updist, data=environment2)
newdata <- as.data.frame(cbind(rep(mean(environment2$T_av),37), seq(from=range(environment2$Con_av)[1], to=range(environment2$Con_av)[2], length.out=37), rep(mean(environment2$COD_av),37), rep(mean(environment2$NH4._av),37), rep(mean(spavar$updist),37)))
colnames(newdata) <- c("T_av", "Con_av", "COD_av", "NH4._av", "spavar$updist")
summary(fit)
pred <- predict(fit)
pred <- predict(fit, newdata)
d <- data.frame(cbind(environment2$Con_av, (pred)^3))
p <- ggplot(d, aes(x = newdata$Con_av, y = (pred)^3)) +
theme_bw() +
geom_smooth(method=lm, color="red", fill="#69b3a2", se=TRUE) +
geom_smooth(method=loess, se=FALSE, linetype="dashed") +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
p
install.packages("broom")
install.packages(tidyr)
devtools::install_github("hadley/tidyr")
install.packages("broom")
library(broom)
fit1 = lm( log(mpg) ~ disp + hp + drat + wt, data = mtcars)
summary(fit1)
( mod_vars = all.vars( formula(fit1) )[-1] )
preddat_fun = function(data, allvars, var) {
sums = summarise_at(data,
vars( one_of(allvars), -one_of(var) ),
median)
cbind( select_at(data, var), sums)
}
head( preddat_fun(mtcars, mod_vars, "disp") )
head( preddat_fun(mtcars, mod_vars, "disp") )
pred_dats = mod_vars %>%
set_names() %>%
map( ~preddat_fun(mtcars, mod_vars, .x) )
str(pred_dats)
preds = pred_dats %>%
map(~augment(fit1, newdata = .x) ) %>%
map(~mutate(.x,
lower = exp(.fitted - 2*.se.fit),
upper = exp(.fitted + 2*.se.fit),
pred = exp(.fitted) ) )
str(preds$disp)
data1 <- as.data.frame(cbind((medin$tricho)^(1/3), environment2$T_av, environment2$Con_av^2, environment2$COD_av, log(environment2$NH4._av), spavar$updist))
colnames(data1) <- c("tricho", "T_av", "Con_av", "COD_av", "NH4._av", "updist")
fit <- lm(tricho ~ T_av + Con_av + COD_av + NH4._av + updist, data=data1)
effect_plot(model = fit, pred = Con_av, interval = TRUE, partial.residuals = TRUE)
library(effects)
install.packages("ggeffects")
library(ggeffects)
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + spavar$updist, data=environment2)
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + spavar$updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av), data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x^3, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + spavar$updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
updist <- spavar$updist
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (predicted)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predict^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (predict)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x = environment2$Con_av, y = (pred)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(predict, aes(x = environment2$Con_av, y = (predicted)^3)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_points(environment2, aes(x=environment2$Con_av, y=medin$tricho))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line() +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(colors="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_smooth(method=loess, se=FALSE, linetype="dashed") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
data1 <- as.data.frame(cbind((medin$tricho)^(1/3), environment2$T_av, environment2$Con_av^2, environment2$COD_av, log(environment2$NH4._av), spavar$updist))
colnames(data1) <- c("tricho", "T_av", "Con_av", "COD_av", "NH4._av", "updist")
fit <- lm(tricho ~ T_av + Con_av + COD_av + NH4._av + updist, data=data1)
effect_plot(model = fit, pred = Con_av, interval = TRUE, partial.residuals = TRUE)
library(effects)
install.packages("effects")
