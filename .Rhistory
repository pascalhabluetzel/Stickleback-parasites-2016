<<<<<<< Updated upstream
??ggpredict
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.00001) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
predict$predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.00001) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
predict$predicted
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+1) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av"+1)
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.001) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
??ggpredict
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.01) + updist, data=environment2)
predict <- ggpredict(fit, terms = "NH4._av")
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
x <- cbind(patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472), day <- c(1:34))
patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472)
x <- cbind(patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472), day <- c(1:35))
model <- lm(patients ~ day + I(day)^2, data=x)
model <- lm(patients ~ day + I(day)^2, data=x)
x <- as.data.frame(cbind(patients <- c(260, 250, 249, 254, 216, 293, 318, 315, 353, 371, 392, 421, 432, 490, 505, 550, 602, 620, 626, 654, 708, 716, 739, 771, 789, 819, 866, 937, 952, 1050, 1110, 1189, 1257, 1331, 1472), day <- c(1:35)))
model <- lm(patients ~ day + I(day)^2, data=x)
model
model <- lm(log(patients) ~ day, data=x)
model
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x[24:35,])
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x[24:35,])
summary(model)
model <- lm(log(patients) ~ day, data=x[24:35,])
summary(model)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients[24:35] ~ day[24:35], xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients[24:35] ~ day[24:35], xlim=c(24,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
patients_exp <- exp(predict(model, list(day=timeseq)))
lines(timeseq, patients_exp)
model <- lm(log(patients[24:35]) ~ day[24:35], data=x[24:35,])
summary(model)
timeseq <- seq(24, 50, 0.1)
patients_exp <- exp(predict(model, list(day[24:35]=timeseq)))
plot(patients[24:35] ~ day[24:35], xlim=c(24,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
max(patients_exp)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:35)))
patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:25)))
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 50, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,50), ylim=c(0,10000))
lines(timeseq, patients_exp)
plot(patients ~ day, xlim=c(0,50), ylim=c(0,2000))
lines(timeseq, patients_exp)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
max(patients_exp)
model <- lm(log(patients) ~ day, data=x[11:25;])
model <- lm(log(patients) ~ day, data=x[11:25,])
summary(model)
timeseq <- seq(11, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(11,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
model <- lm(log(patients) ~ day, data=x[19:25,])
summary(model)
timeseq <- seq(19, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(19,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
model <- lm(log(patients[19:25,]) ~ day[19:25,], data=x[19:25,])
summary(model)
timeseq <- seq(19, 46, 0.1)
x <- x[19:25,]
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
x
model <- lm(log(patients) ~ day, data=x)
summary(model)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:25)))
model <- lm(log(patients) ~ day, data=x)
summary(model)
x <- x[19:25,]
x
model <- lm(log(x[,1]) ~ x[,2], data=x)
summary(model)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
max(patients_exp)
patients_exp <- exp(predict(model, list(x[,2]=timeseq)))
patients_exp <- exp(predict(model, list(V2=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
patients_exp <- exp(predict(model, list(V2=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(V2=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
max(patients_exp)
summary(model)
x <- as.data.frame(cbind(patients <- c(77, 87, 94, 95, 104, 109, 120, 135, 140, 150, 157, 156, 163, 185, 186, 195, 189, 201, 213, 212, 226, 243, 268, 281, 313), day <- c(1:25)))
x <- x[19:25,]
colnames(x) <- c("patients","day")
model <- lm(log(patiens) ~ day, data=x)
model <- lm(log(patients) ~ day, data=x)
summary(model)
timeseq <- seq(0, 46, 0.1)
patients_exp <- exp(predict(model, list(day=timeseq)))
plot(patients ~ day, xlim=c(0,46), ylim=c(0,2000))
lines(timeseq, patients_exp)
#install.packages("ggeffects")
#library(ggeffects)
updist <- spavar$updist
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=medin$tricho)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
updist <- spavar$updist
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log(NH4._av+0.01) + updist, data=environment2) # add a small number to the ammonium value to avoid infinite values in subsequent calculations
predict <- ggpredict(fit, terms = "NH4._av")
??ggpredict
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
fit <- lm((medin$tricho)^(1/3) ~ T_av + Con_av^2 + COD_av + log1p(NH4._av) + updist, data=environment2) # add a small number to the ammonium value to avoid infinite values in subsequent calculations
predict <- ggpredict(fit, terms = "NH4._av")
??ggpredict
#predicted[1] <- 0; predict$conf.high[1] <- 0; predict$conf.low[1] <- 0
ggplot(predict, aes(x, predicted^3)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low^3, ymax = conf.high^3), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$NH4._av, y=medin$tricho)) +
labs(x=expression("NH4"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
??log1p
?log1p
#Bayesian approach
bas.model <- bas.lm(avcondition ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
plot(confint(coef.model, parm = 2:11))
pip <- summary(bas.model)
PIP[c(3:12),1] <- pip[2:11,1]*sign(coef.model$postmean[2:11])
#### Length ####
# Effect of environment (average) on host length
avlength <- aggregate(data$length, by = list(data[,1]), function(x){mean(x, na.rm =T)})[,2]
summary(avlength); plot(density(avlength))
model <- lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
# Have a look at a Bayesian approach
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
# Bayesian Model Averaging
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
plot(confint(coef.model, parm = 2:11))
# Bayesian Model Averaging
bas.model <- bas.lm(avlength ~ T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
netcen <- spavar$netcen
updist <- spavar$updist
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
netcen <- spavar$netcen
updist <- spavar$updist
fit <- lm(avlength ~ O2_sat_av + Con_av^2 + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avlength)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression("Average length [mm SL]"))
predict <- ggpredict(fit, terms = "netcen")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=netcen, y=avlength)) +
labs(x=expression("Network centrality"), y=expression("Average length [mm SL]"))
#### CALCULATE PARAMETERS ####
names(data)
#parasite data is overdispersed (mostly so for Trichodina), if using average abundance data, species matrix needs to be transformed
datao <- na.omit(data[,c(1,23:25,27:33)])
ddata <- dispweight(datao[,-1])
avab <- aggregate(ddata, by = list(datao[,1]), function(x){mean(x, na.rm =T)})
prev = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){sum(x >0, na.rm = T)/length(x)})
medin = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){median(x[x >0], na.rm = T)})
pa = aggregate(data[,c(23:25,27:33)], by = list(data[,1]), function(x){ifelse(mean(x, na.rm =T)>0,1,0)})
avab[is.na(avab)] <- 0
prev[is.na(prev)] <- 0
medin[is.na(medin)] <- 0
#### Gyrodactylus ####
#### Average abundance ####
plot(avab$gyro); plot(density(avab$gyro))
plot((avab$gyro)^(1/3)); plot(density((avab$gyro)^(1/3)))
model <- lm((avab$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm((avab$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((avab$gyro)^(1/3) ~ avlength + T_av + COD_av + log(Nt_av) + pool_riffle, data=environment2)
summary(model)
#plot(model)
res <- resid(lm((avab$gyro)^(1/3) ~ T_av + COD_av + log(Nt_av) + pool_riffle, data=environment2))
plot(res ~ avlength)
lines(lowess(res ~ avlength), col=3)
cor.test(res, avlength, method="spearman")
res <- resid(lm((avab$gyro)^(1/3) ~ avlength + T_av + log(Nt_av) + pool_riffle, data=environment2))
plot(res ~ environment2$COD_av)
lines(lowess(res ~ environment2$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
# Bayesian Model Averaging
bas.model <- bas.lm(avab$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
# Bayesian Model Averaging
bas.model <- bas.lm(avab$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
fit <- lm(avlength ~ avlength + O2_sat_av + Con_av^2 + COD_av + log1p(NH4._av) + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avlength)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression("Average length [mm SL]"))
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avlength)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
fit <- lm(avab$gyro ~ avlength + O2_sat_av + Con_av^2 + COD_av + log1p(NH4._av) + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avab$gyro)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
predict <- ggpredict(fit, terms = "COD_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$COD_av, y=avab$gyro)) +
labs(x=expression("Chemical oxygen demand [mg/L]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
# Have a look at a Bayesian approach
bas.model <- bas.lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
netcen <- spavar$netcen
updist <- spavar$updist
fit <- lm(avab$gyro ~ Con_av^2 + log1p(NH4._av) + log(Nt_av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=avab$gyro)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
prev$gyro
fit <- lm(prev$gyro ~ Con_av^2 + log1p(NH4._av) + log(Nt_av) + updist, data=environment2)
predict <- ggpredict(fit, terms = "Con_av")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=prev$gyro)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Gyrodactylus)~"sp. [prevalence]"))
# Bayesian Model Averaging
=======
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$COD_av, y=avab$gyro)) +
labs(x=expression("Chemical oxygen demand [mg/L]"), y=expression(italic(Gyrodactylus)~"sp. [average abundance]"))
dev.off()
plot(prev$gyro); plot(density(prev$gyro))
model <- lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm(prev$gyro ~ Con_av + COD_av + pool_riffle + meander, data=environment2)
summary(model)
res <- resid(lm(prev$gyro ~ COD_av + pool_riffle + meander, data=environment2))
plot(res ~ environment$Con_av)
lines(lowess(res ~ environment$Con_av), col=3)
cor.test(res, environment2$Con_av, method="spearman")
res <- resid(lm(prev$gyro ~ Con_av + pool_riffle + meander, data=environment2))
plot(res ~ environment$COD_av)
lines(lowess(res ~ environment$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
bas.model <- bas.lm(prev$gyro ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:13))
write.table(confint, 'GyroPrev.txt', sep="\t")
plot(medin$gyro); plot(density(medin$gyro))
plot((medin$gyro)^(1/3)); plot(density((medin$gyro)^(1/3)))
model <- lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
model <- lm((medin$gyro)^(1/3) ~ T_av + COD_av + spavar$netcen, data=environment2)
step.model
summary(model)
>>>>>>> Stashed changes
bas.model <- bas.lm((medin$gyro)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
<<<<<<< Updated upstream
plot(confint(coef.model, parm = 2:12))
pip <- summary(bas.model)
PIP[c(1:12),5] <- pip[2:13,1]*sign(coef.model$postmean[2:13])
# Bayesian Model Averaging
=======
plot(confint(coef.model, parm = 2:13))
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'GyroMedIn.txt', sep="\t")
plot(avab$tricho); plot(density(avab$tricho))
plot((avab$tricho)^(1/3)); plot(density((avab$tricho)^(1/3)))
model <- lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((avab$tricho)^(1/3) ~ Con_av + COD_av + pool_riffle + meander + spavar$netcen, data=environment2)
summary(model)
res <- resid(lm((avab$tricho)^(1/3) ~ COD_av + pool_riffle + meander + spavar$netcen, data=environment2))
plot(res ~ environment2$Con_av)
lines(lowess(res ~ environment2$Con_av), col=3)
cor.test(res, environment2$Con_av, method="spearman")
res <- resid(lm((avab$tricho)^(1/3) ~ Con_av + pool_riffle + meander + spavar$netcen, data=environment2))
plot(res ~ environment2$COD_av)
lines(lowess(res ~ environment2$COD_av), col=3)
cor.test(res, environment2$COD_av, method="spearman")
res <- resid(lm((avab$tricho)^(1/3) ~ Con_av + COD_av + pool_riffle + meander, data=environment2))
plot(res ~ spavar$netcen)
lines(lowess(res ~ spavar$netcen), col=3)
cor.test(res, spavar$netcen, method="spearman")
>>>>>>> Stashed changes
bas.model <- bas.lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
<<<<<<< Updated upstream
pip <- summary(bas.model)
# Bayesian
=======
plot(confint(coef.model, parm = 2:13))
write.table(confint, 'TrichoAvAb.txt', sep="\t")
plot(prev$tricho); plot(density(prev$tricho))
model <- lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm(prev$tricho ~ Con_av + log(NH4._av), data=environment2)
summary(model)
res <- resid(lm(prev$tricho ~ log(NH4._av), data=environment2))
plot(res ~ environment2$Con_av)
cor.test(res, environment2$Con_av, method="spearman")
res <- resid(lm(prev$tricho ~ Con_av, data=environment2))
plot(res ~ log(environment2$NH4._av))
lines(lowess(res ~ environment2$Con_av), col=3)
>>>>>>> Stashed changes
bas.model <- bas.lm(prev$tricho ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
lines(lowess(res ~ log(environment2$NH4._av)), col=3)
image(bas.model, rotate=F)
cor.test(res, environment2$NH4._av, method="spearman")
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
<<<<<<< Updated upstream
# Bayesian Model Averaging
=======
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'TrichoPrev.txt', sep="\t")
plot(medin$tricho); plot(density(medin$tricho))
plot((medin$tricho)^(1/3)); plot(density((medin$tricho)^(1/3)))
model <- lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2)
summary(model)
step.model <- stepAIC(lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2),
direction = "both",
trace = FALSE)
step.model
model <- lm((medin$tricho)^(1/3) ~ Con_av^2 + COD_av + log(NH4._av) + pool_riffle + meander + spavar$netcen, data=environment2)
summary(model)
res <- resid(lm(prev$tricho ~ COD_av + log(NH4._av) + pool_riffle + meander + spavar$netcen, data=environment2))
plot(res ~ environment2$Con_av)
lines(lowess(res ~ environment2$Con_av), col=3)
cor.test(res, environment2$Con_av^2, method="spearman")
>>>>>>> Stashed changes
bas.model <- bas.lm((medin$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
<<<<<<< Updated upstream
pip <- summary(bas.model)
# Bayesian Model Averaging
bas.model <- bas.lm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
=======
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'TrichoMedin.txt', sep="\t")
model <- glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + meander, data=environment2, family=binomial(link="logit"))
summary(model)
model <- glm(pa$glugea ~ pool_riffle + spavar$netcen + spavar$updist, data=environment2, family=binomial(link="logit"))
summary(model)
step.model <- stepAIC(glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family=binomial(link="logit")),
direction = "both",
trace = FALSE)
step.model
model <- glm(pa$glugea ~ avlength + T_av + Con_av^2 + log(NH4._av) + pool_riffle + meander, data=environment2, family=binomial(link="logit"))
summary(model)
plot(as.factor(pa$glugea), avlength)
plot(as.factor(pa$glugea), environment2$Con_av)
table(as.factor(pa$glugea), environment2$meander)
pa_glugea <- pa$glugea
netcen <- spavar$netcen
updist <- spavar$updist
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=uniform())
>>>>>>> Stashed changes
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
<<<<<<< Updated upstream
?bas.lm
pa$glugea
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"),
source('~/GitHub/Stickleback-parasites-2016/Parasite2016_Bayesian_analyses_current.R', echo=TRUE)
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"), prior="JZS")
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"), prior="JZS")
# Bayesian Model Averaging
bas.model <- bas.glm(pa$glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
# Bayesian Model Averaging
pa_glugea <- pa$glugea
netcen <- spavar$netcen
updist <- spavar$updist
bas.model <- bas.glm(glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
environment2
netcen
updist
pool_riffle
pa_glugea
avlength
avcondition
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
avlength
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior="g.prior", modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial, betaprior="g.prior", modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior=g.prior, modelprior=beta.binomial)
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior=g.prior, modelprior="beta.binomial")
bas.model <- bas.glm(pa_glugea ~ avlength, family = binomial(link = "logit"), betaprior="g.prior", modelprior=beta.binomial)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior=beta.binomial)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior="g.prior", modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=g.prior, modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(), betaprior=g.prior, modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=g.prior(), modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=g.prior(3), modelprior=beta.binomial(1,1))
summary(bas.model)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=BIC)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior, modelprior=beta.binomial(1,1))
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=beta.binomial(1,1))
summary(bas.model)
image(bas.model, rotate=F)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=robust(), modelprior=beta.binomial(1,1))
summary(bas.model)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=uniform)
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=uniform())
summary(bas.model)
#Figure
BPM <- predict(bas.model, estimator = "BPM")
variable.names(BPM)
fit <- lm(pa_glugea ~ T_av + O2_sat_av + Con_av^2 + COD_av + meander + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "avlength")
fit <- lm(pa_glugea ~ avlength + T_av + O2_sat_av + Con_av^2 + COD_av + meander + netcen + updist, data=environment2)
predict <- ggpredict(fit, terms = "avlength")
fit <- glm(pa_glugea ~ avlength + T_av + O2_sat_av + Con_av^2 + COD_av + meander + netcen + updist, data=environment2, family = binomial(link = "logit"))
fit <- glm(pa_glugea ~ avlength + T_av + O2_sat_av + Con_av^2 + COD_av + meander + updist, data=environment2, family = binomial(link = "logit"))
fit <- glm(pa_glugea ~ avlength + O2_sat_av + Con_av^2 + log(Nt_av) + meander + updist, data=environment2, family = binomial(link = "logit"))
fit <- glm(pa_glugea ~ avlength + O2_sat_av + Con_av^2 + meander + updist, data=environment2, family = binomial(link = "logit"))
predict <- ggpredict(fit, terms = "avlength")
ggplot(predict, aes(x, predicted)) +
theme_bw() +
geom_line(color="red") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1) +
geom_point(data = environment2, aes(x=environment2$Con_av, y=pa_glugea)) +
labs(x=expression("Conductivity ["*mu*"S/cm]"), y=expression(italic(Trichodina)~"sp. [median infection intensity]"))
predict <- ggpredict(fit, terms = "avlength")
?dispweight
=======
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'Glugea.txt', sep="\t")
model <- glm(pa$contra ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family=binomial(link="logit"))
summary(model)
step.model <- stepAIC(glm(pa$contra ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family=binomial(link="logit")),
direction = "both",
trace = FALSE)
step.model
model <- glm(pa$contra ~ avlength + O2_sat_av + Con_av^2 + log(NO3._av) + spavar$netcen, data=environment2, family=binomial(link="logit"))
summary(model)
plot(as.factor(pa$contra), avlength)
plot(as.factor(pa$contra), environment2$O2_sat_av)
bas.model <- bas.lm(pa$contra ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'Contra.txt', sep="\t")
model <- glm(pa$angui ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family=binomial(link="logit"))
summary(model)
model <- glm(pa$angui ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander, data=environment2, family=binomial(link="logit"))
summary(model)
step.model <- stepAIC(glm(pa$angui ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(NO3._av) + log(SM_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, family=binomial(link="logit")),
direction = "both",
trace = FALSE)
step.model
model <- glm(pa$angui ~ avlength + avcondition + T_av + Con_av^2 + COD_av + log(NH4._av) + log(SM_av) + pool_riffle + meander, data=environment2, family=binomial(link="logit"))
summary(model)
plot(as.factor(pa$angui), avlength)
plot(as.factor(pa$angui), environment2$T_av)
table(as.factor(pa$angui), environment2$meander)
bas.model <- bas.glm(pa$angui ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, betaprior=g.prior(100), family=binomial)
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'Angui.txt', sep="\t")
PI_ecto <- 1:nrow(data)
for(j in 1:nrow(data)){
PI_ecto[j] <- max(data$gyro[j]/sd(data$gyro, na.rm=T))*(data$gyro[j]/sd(data$gyro, na.rm=T)) + max(data$tricho[j]/sd(data$tricho, na.rm=T))*(data$tricho[j]/sd(data$tricho, na.rm=T)) + max(data$glugea[j]/sd(data$glugea, na.rm=T))*(data$glugea[j]/sd(data$glugea, na.rm=T))
}
PI_endo <- 1:nrow(data)
for(j in 1:nrow(data)){
PI_endo[j] <-
max(data$contra[j]/sd(data$contra, na.rm=T))*(data$contra[j]/sd(data$contra, na.rm=T))
+ max(data$cystsliver[j]/sd(data$cystsliver, na.rm=T))*(data$cystsliver[j]/sd(data$cystsliver, na.rm=T))
+ max(data$proteo[j]/sd(data$proteo, na.rm=T))*(data$proteo[j]/sd(data$proteo, na.rm=T))
+ max(data$acantho[j]/sd(data$acantho, na.rm=T))*(data$acantho[j]/sd(data$acantho, na.rm=T))
+ max(data$cama[j]/sd(data$cama, na.rm=T))*(data$cama[j]/sd(data$cama, na.rm=T))
+ max(data$angui[j]/sd(data$angui, na.rm=T))*(data$angui[j]/sd(data$angui, na.rm=T))
+ max(data$cistsintestine[j]/sd(data$cistsintestine, na.rm=T))*(data$cistsintestine[j]/sd(data$cistsintestine, na.rm=T))
}
PI <- 1:nrow(data)
for(j in 1:nrow(data)){
PI[j] <-
max(data$gyro[j]/sd(data$gyro, na.rm=T))*(data$gyro[j]/sd(data$gyro, na.rm=T))
+ max(data$tricho[j]/sd(data$tricho, na.rm=T))*(data$tricho[j]/sd(data$tricho, na.rm=T))
+ max(data$glugea[j]/sd(data$glugea, na.rm=T))*(data$glugea[j]/sd(data$glugea, na.rm=T))
+ max(data$contra[j]/sd(data$contra, na.rm=T))*(data$contra[j]/sd(data$contra, na.rm=T))
+ max(data$cystsliver[j]/sd(data$cystsliver, na.rm=T))*(data$cystsliver[j]/sd(data$cystsliver, na.rm=T))
+ max(data$proteo[j]/sd(data$proteo, na.rm=T))*(data$proteo[j]/sd(data$proteo, na.rm=T))
+ max(data$acantho[j]/sd(data$acantho, na.rm=T))*(data$acantho[j]/sd(data$acantho, na.rm=T))
+ max(data$cama[j]/sd(data$cama, na.rm=T))*(data$cama[j]/sd(data$cama, na.rm=T))
+ max(data$angui[j]/sd(data$angui, na.rm=T))*(data$angui[j]/sd(data$angui, na.rm=T))
+ max(data$cistsintestine[j]/sd(data$cistsintestine, na.rm=T))*(data$cistsintestine[j]/sd(data$cistsintestine, na.rm=T))
}
avPI <- aggregate(PI, by = list(data[,1]), function(x){mean(x, na.rm =T)})[,2]
avPI_ecto <- aggregate(PI_ecto, by = list(data[,1]), function(x){mean(x, na.rm =T)})[,2]
avPI_endo <- aggregate(PI_endo, by = list(data[,1]), function(x){mean(x, na.rm =T)})[,2]
bas.model <- bas.lm(avPI ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint <- confint(coef.model)
write.table(confint, 'avPI.txt', sep="\t")
bas.model <- bas.lm(avPI_ecto ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
confint <- confint(coef.model)
write.table(confint, 'avPI.txt', sep="\t")
write.table(confint, 'avPI_ecto.txt', sep="\t")
bas.model <- bas.lm(avPI ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
confint <- confint(coef.model)
write.table(confint, 'avPI.txt', sep="\t")
bas.model <- bas.lm(avPI_endo ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:12))
write.table(confint, 'avPI_endo.txt', sep="\t")
confint <- confint(coef.model)
write.table(confint, 'avPI_endo.txt', sep="\t")
pa_glugea <- pa$glugea
netcen <- spavar$netcen
updist <- spavar$updist
bas.model <- bas.glm(pa_glugea ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + netcen + updist, data=environment2, family = binomial(link = "logit"), betaprior=bic.prior(), modelprior=uniform())
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
confint(coef.model)
confint <- confint(coef.model, parm = 2:13)
plot(confint(coef.model, parm = 2:12))
bas.model <- bas.lm((avab$tricho)^(1/3) ~ avlength + avcondition + T_av + O2_sat_av + Con_av^2 + COD_av + log(NH4._av) + log(Nt_av) + pool_riffle + meander + spavar$netcen + spavar$updist, data=environment2, prior="JZS")
summary(bas.model)
image(bas.model, rotate=F)
coef.model <- coef(bas.model)
abs(coef.model$postmean)-2*coef.model$postsd > 0
confint(coef.model)
plot(confint(coef.model, parm = 2:13))
confint <- confint(coef.model, parm = 2:13)
write.table(confint, 'TrichoAvAb.txt', sep="\t")
setwd('C:/Users/u0113095/Google Drive/PhD/2 Parasite/2016/Analysis_2020')
setwd('C:/Users/u0113095/Documents/GitHub/Stickleback-parasites-2016')
data_2016 <- read.csv("data_2016.csv", sep=';') #field and parasite data
data_2016 <- read.csv("data_2016_1211.csv", sep=';') #field and parasite data
data_2016 <- read.csv("data_2016.csv", sep=';') #field and parasite data
data_2016 <- read.csv("data_2016_1211.csv", sep=';') #field and parasite data
env <- read.csv("Environment_R.csv", sep=',') #all environmental data
spavar <- read.csv("space2.csv", sep=';') #spatial variables: network centrality and upstream distance
distance_matrix <- read.csv("distance_matrix.csv", sep=';') #spatial variables: distance matrix
KautoDist <- data.frame(cmdscale(distance_matrix),rownames(distance_matrix));colnames(distance_matrix)<- c("X1","X2","LocationID")
spa <- KautoDist[,c(1,2)]
library(raster)
dist <- pointDistance(spa, allpairs = TRUE, lonlat = FALSE)
spa.dist <- as.dist(dist)
spanning <- spantree(spa.dist)
dmin <- max(spanning$dist)
spa.dist[spa.dist>dmin] <- 4*dmin
xy.PCoA <- cmdscale(spa.dist,k=nrow(spa)-1,eig=TRUE)
nb.ev<-length(which(xy.PCoA$eig > 0.0001))
xy.PCoA$eig
ev <- xy.PCoA$eig
ev <- subset(ev, xy.PCoA$eig > 0.0001)
n <- length(ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {
bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))
}
bsm$p <- 100*bsm$p/n
bsm
par(mfrow=c(1,1))
barplot(ev, main="Eigenvalues", col="bisque", las=2)
abline(h=mean(ev), col="red")
legend("topright", "Average eigenvalue", lwd=1, col=2, bty="n")
barplot(t(cbind(100*ev/sum(ev), bsm$p[n:1])), beside=TRUE, main="% variance", col=c("bisque", 2), las=2)
nb.ev <- length(which(xy.PCoA$eig > mean(ev)))
distance_matrix <- read.csv("distance_matrix.csv", sep=';') #spatial variables: distance matrix
KautoDist <- data.frame(cmdscale(distance_matrix),rownames(distance_matrix));colnames(distance_matrix)<- c("X1","X2","LocationID")
spa <- KautoDist[,c(1,2)]
library(raster)
dist <- pointDistance(spa, allpairs = TRUE, lonlat = FALSE)
spa.dist <- as.dist(dist)
spanning <- spantree(spa.dist)
dmin <- max(spanning$dist)
spa.dist[spa.dist>dmin] <- 4*dmin
library(ggvegan)
library(ggthemes)
library(raster)
library(ggplot2)
library(readr)
library(gridExtra)
library(plyr)
library(afex)
library(dplyr) # building data matrix
library(MASS)
library(glmmTMB) # GLMMs
library(car) # ANOVA
setwd('C:/Users/u0113095/Documents/GitHub/Stickleback-parasites-2016')
data_2016 <- read.csv("data_2016_1211.csv", sep=';') #field and parasite data
env <- read.csv("Environment_R.csv", sep=',') #all environmental data
spavar <- read.csv("space2.csv", sep=';') #spatial variables: network centrality and upstream distance
distance_matrix <- read.csv("distance_matrix.csv", sep=';') #spatial variables: distance matrix
KautoDist <- data.frame(cmdscale(distance_matrix),rownames(distance_matrix));colnames(distance_matrix)<- c("X1","X2","LocationID")
spa <- KautoDist[,c(1,2)]
library(raster)
dist <- pointDistance(spa, allpairs = TRUE, lonlat = FALSE)
spa.dist <- as.dist(dist)
spanning <- spantree(spa.dist)
dmin <- max(spanning$dist)
spa.dist[spa.dist>dmin] <- 4*dmin
xy.PCoA <- cmdscale(spa.dist,k=nrow(spa)-1,eig=TRUE)
nb.ev<-length(which(xy.PCoA$eig > 0.0001))
xy.PCoA$eig
ev <- xy.PCoA$eig
ev <- subset(ev, xy.PCoA$eig > 0.0001)
n <- length(ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {
bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))
}
bsm$p <- 100*bsm$p/n
bsm
par(mfrow=c(1,1))
barplot(ev, main="Eigenvalues", col="bisque", las=2)
abline(h=mean(ev), col="red")
legend("topright", "Average eigenvalue", lwd=1, col=2, bty="n")
barplot(t(cbind(100*ev/sum(ev), bsm$p[n:1])), beside=TRUE, main="% variance", col=c("bisque", 2), las=2)
nb.ev <- length(which(xy.PCoA$eig > mean(ev)))
spa.PCNM <- as.data.frame(xy.PCoA$points[1:nrow(spa),1:3])
cor(spavar$updist, spa.PCNM$V1)
plot(spavar$updist, spa.PCNM$V1) #first MEM corresponds to distance from Demer-Dijle confluence
cor(spavar$netcen, spa.PCNM$V2)
plot(spavar$netcen, spa.PCNM$V2) #second MEM corresponds to network centrality
env_exp <- env %>% slice(rep(1:n(), table(as.factor(data_2016$site))))
spavar_exp <- spavar %>% slice(rep(1:n(), table(as.factor(data_2016$site))))
spa.PCNM_exp <- spa.PCNM %>% slice(rep(1:n(), table(as.factor(data_2016$site))))
data0 <- cbind(data_2016, env_exp[,-1], spavar_exp, spa.PCNM_exp)
NAs <- 1>rowSums(is.na(data0[,c("weight", "length", "Sex")])) # identify fish with any of the following data missing: length, weight, sex
table(NAs)
data <- data0[NAs,] # remove fish with missing data
data$site <- as.factor(data$site)
data$fish <- as.factor(data$fish)
data$length <- as.numeric(data$length)
View(data)
names(data)
parsum = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){sum(x, na.rm = T)})
View(parsum)
avin = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){mean(x[x >0], na.rm = T)}); avin[is.na(avin)] <- 0
avab = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){mean(x, na.rm =T)})
prev = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){sum(x >0, na.rm = T)/length(x)})
medin = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){median(x[x >0], na.rm = T)}) ; medin[is.na(medin)] <- 0
datao <- na.omit(data[,c(21:23,25:31)])
ddata <- dispweight(datao[,-1])
avab <- aggregate(ddata, by = list(datao[,1]), function(x){mean(x, na.rm =T)})
data_infra <- na.omit(data[,c(1,21:23,25:31)])
data_infra_disp <- dispweight(data_infra[,-1])
braycurtis <- vegdist(decostand(cbind(data_infra_disp,rep(1,nrow(data_infra))), na.rm=T, method="hellinger"), method="bray", na.rm=T)
meandist_bray <- meandist(braycurtis, data_infra[,1])
braycurtis <- vegdist(decostand(cbind(data_infra_disp,rep(1,nrow(data_infra))), na.rm=T, method="hellinger"), method="bray", na.rm=T)
meandist_bray <- meandist(braycurtis, data_infra[,1])
euc <- vegdist(decostand(cbind(data_infra_disp,rep(1,nrow(data_infra))), na.rm=T, method="hellinger"), method="euc", na.rm=T)
meandist_euc <- meandist(euc, data_infra[,1])
plot(meandist_bray[1:37,1:37], meandist_euc[1:37,1:37])
mantel(meandist_bray[1:37,1:37], meandist_euc[1:37,1:37])
env_select <- env[,c("T_av","con_av","O2_sat_av","Cl_av","COD_av","NH4_av","NO3_av","NO2_av")]
env_select <- env[,c("T_av","con_av","O2_sat_av","Cl_av","COD_av","NH4_av")]
env_select <- env[,c("T_av","con_av","O2_sat_av","Nt_av","COD_av","NH4_av")]
View(env_select)
env_select <- env_select %>% rename(T_av = Temperature,
con_av = Conductivity,
O2_sat_av = Oxygen,
COD_av = COD,
NH4_av = NH4,
Nt_av = Nt)
env_select <- env_select %>% rename( Temperature = T_av,
con_av = Conductivity,
O2_sat_av = Oxygen,
COD_av = COD,
NH4_av = NH4,
Nt_av = Nt)
env_select <- env_select %>% rename( Temperature = T_av,
Conductivity = con_av,
Oxygen = O2_sat_av,
COD = COD_av,
NH4 = NH4_av,
Nt = Nt_av)
View(env_select)
View(env)
env <- read.csv("Environment_RDA.csv", sep=';') #all environmental data
setwd('C:/Users/u0113095/Google Drive/PhD/2 Parasite/2016/Analysis_2020/Github')
env <- read.csv("Environment_RDA.csv", sep=';') #all environmental data
View(env)
View(env_select)
setwd('C:/Users/u0113095/Documents/GitHub/Stickleback-parasites-2016')
data_2016 <- read.csv("data_2016_1211.csv", sep=';') #field and parasite data
env <- read.csv("Environment_RDA.csv", sep=',') #all environmental data
spavar <- read.csv("space2.csv", sep=';') #spatial variables: network centrality and upstream distance
distance_matrix <- read.csv("distance_matrix.csv", sep=';') #spatial variables: distance matrix
KautoDist <- data.frame(cmdscale(distance_matrix),rownames(distance_matrix));colnames(distance_matrix)<- c("X1","X2","LocationID")
spa <- KautoDist[,c(1,2)]
library(raster)
dist <- pointDistance(spa, allpairs = TRUE, lonlat = FALSE)
spa.dist <- as.dist(dist)
spanning <- spantree(spa.dist)
dmin <- max(spanning$dist)
spa.dist[spa.dist>dmin] <- 4*dmin
xy.PCoA <- cmdscale(spa.dist,k=nrow(spa)-1,eig=TRUE)
nb.ev<-length(which(xy.PCoA$eig > 0.0001))
xy.PCoA$eig
ev <- xy.PCoA$eig
ev <- subset(ev, xy.PCoA$eig > 0.0001)
n <- length(ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {
bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))
}
bsm$p <- 100*bsm$p/n
bsm
par(mfrow=c(1,1))
barplot(ev, main="Eigenvalues", col="bisque", las=2)
abline(h=mean(ev), col="red")
legend("topright", "Average eigenvalue", lwd=1, col=2, bty="n")
barplot(t(cbind(100*ev/sum(ev), bsm$p[n:1])), beside=TRUE, main="% variance", col=c("bisque", 2), las=2)
nb.ev <- length(which(xy.PCoA$eig > mean(ev)))
spa.PCNM <- as.data.frame(xy.PCoA$points[1:nrow(spa),1:3])
cor(spavar$updist, spa.PCNM$V1)
plot(spavar$updist, spa.PCNM$V1) #first MEM corresponds to distance from Demer-Dijle confluence
cor(spavar$netcen, spa.PCNM$V2)
plot(spavar$netcen, spa.PCNM$V2) #second MEM corresponds to network centrality
env_exp <- env %>% slice(rep(1:n(), table(as.factor(data_2016$site))))
spa.PCNM_exp <- spa.PCNM %>% slice(rep(1:n(), table(as.factor(data_2016$site))))
spavar_exp <- spavar %>% slice(rep(1:n(), table(as.factor(data_2016$site))))
data0 <- cbind(data_2016, env_exp[,-1], spavar_exp, spa.PCNM_exp)
NAs <- 1>rowSums(is.na(data0[,c("weight", "length", "Sex")])) # identify fish with any of the following data missing: length, weight, sex
table(NAs)
data <- data0[NAs,] # remove fish with missing data
data$site <- as.factor(data$site)
data$fish <- as.factor(data$fish)
data$length <- as.numeric(data$length)
names(data)
parsum = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){sum(x, na.rm = T)})
avin = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){mean(x[x >0], na.rm = T)}); avin[is.na(avin)] <- 0
avab = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){mean(x, na.rm =T)})
prev = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){sum(x >0, na.rm = T)/length(x)})
medin = aggregate(data[,c(21:23,25:31)], by = list(data[,1]), function(x){median(x[x >0], na.rm = T)}) ; medin[is.na(medin)] <- 0
datao <- na.omit(data[,c(21:23,25:31)])
ddata <- dispweight(datao[,-1])
avab <- aggregate(ddata, by = list(datao[,1]), function(x){mean(x, na.rm =T)})
data_infra <- na.omit(data[,c(1,21:23,25:31)])
data_infra_disp <- dispweight(data_infra[,-1])
braycurtis <- vegdist(decostand(cbind(data_infra_disp,rep(1,nrow(data_infra))), na.rm=T, method="hellinger"), method="bray", na.rm=T)
meandist_bray <- meandist(braycurtis, data_infra[,1])
braycurtis <- vegdist(decostand(cbind(data_infra_disp,rep(1,nrow(data_infra))), na.rm=T, method="hellinger"), method="bray", na.rm=T)
meandist_bray <- meandist(braycurtis, data_infra[,1])
euc <- vegdist(decostand(cbind(data_infra_disp,rep(1,nrow(data_infra))), na.rm=T, method="hellinger"), method="euc", na.rm=T)
meandist_euc <- meandist(euc, data_infra[,1])
plot(meandist_bray[1:37,1:37], meandist_euc[1:37,1:37])
mantel(meandist_bray[1:37,1:37], meandist_euc[1:37,1:37])
field_data <- read.csv("field_data.csv", sep=',')
env_select <- env[,c("Temperature","Conductivity","Oxygen","COD","NH4","Nt","Meander", "Poolriffle")]
View(env)
env <- read.csv("Environment_RDA.csv", sep=';') #all environmental data
env_select <- env[,c("Temperature","Conductivity","Oxygen","COD","NH4","Nt","Meander", "Poolriffle")]
View(env_select)
env_select$Poolriffle <- as.factor(env_select$Poolriffle)
env_select$Meander <- as.factor(env_select$Meander)
spe.rda <- dbrda(meandist_bray ~ Temperature + Conductivity + Oxygen + COD + NH4 + Nt + Meander +
Poolriffle, env_select)
>>>>>>> Stashed changes
